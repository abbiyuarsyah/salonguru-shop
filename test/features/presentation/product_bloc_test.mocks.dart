// Mocks generated by Mockito 5.4.4 from annotations
// in salonguru_shop/test/features/presentation/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:salonguru_shop/core/utils/execptions.dart' as _i11;
import 'package:salonguru_shop/features/product/domain/entities/cart_entity.dart'
    as _i13;
import 'package:salonguru_shop/features/product/domain/entities/checkout_entity.dart'
    as _i12;
import 'package:salonguru_shop/features/product/domain/entities/products_entity.dart'
    as _i14;
import 'package:salonguru_shop/features/product/domain/respositories/product_repository.dart'
    as _i2;
import 'package:salonguru_shop/features/product/domain/use_case/add_to_cart.dart'
    as _i6;
import 'package:salonguru_shop/features/product/domain/use_case/do_checkout.dart'
    as _i8;
import 'package:salonguru_shop/features/product/domain/use_case/get_cart.dart'
    as _i5;
import 'package:salonguru_shop/features/product/domain/use_case/get_products.dart'
    as _i4;
import 'package:salonguru_shop/features/product/domain/use_case/remove_from_cart.dart'
    as _i7;
import 'package:salonguru_shop/features/product/presentation/bloc/product_bloc.dart'
    as _i15;
import 'package:salonguru_shop/features/product/presentation/bloc/product_event.dart'
    as _i16;
import 'package:salonguru_shop/features/product/presentation/bloc/product_state.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetProducts_2 extends _i1.SmartFake implements _i4.GetProducts {
  _FakeGetProducts_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCart_3 extends _i1.SmartFake implements _i5.GetCart {
  _FakeGetCart_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddToCart_4 extends _i1.SmartFake implements _i6.AddToCart {
  _FakeAddToCart_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveFromCart_5 extends _i1.SmartFake
    implements _i7.RemoveFromCart {
  _FakeRemoveFromCart_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDoCheckout_6 extends _i1.SmartFake implements _i8.DoCheckout {
  _FakeDoCheckout_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductState_7 extends _i1.SmartFake implements _i9.ProductState {
  _FakeProductState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddToCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToCart extends _i1.Mock implements _i6.AddToCart {
  MockAddToCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i10.Future<_i3.Either<_i11.Failure, bool>> call(
          _i6.AddToCartParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, bool>>.value(
            _FakeEither_1<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, bool>>);
}

/// A class which mocks [DoCheckout].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoCheckout extends _i1.Mock implements _i8.DoCheckout {
  MockDoCheckout() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i10.Future<_i3.Either<_i11.Failure, _i12.CheckoutEntity>> call(
          List<_i8.CheckoutParams>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, _i12.CheckoutEntity>>.value(
                _FakeEither_1<_i11.Failure, _i12.CheckoutEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i12.CheckoutEntity>>);
}

/// A class which mocks [GetCart].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCart extends _i1.Mock implements _i5.GetCart {
  MockGetCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i13.CartEntity>>> call(
          Object? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i13.CartEntity>>>.value(
                _FakeEither_1<_i11.Failure, List<_i13.CartEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i13.CartEntity>>>);
}

/// A class which mocks [GetProducts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProducts extends _i1.Mock implements _i4.GetProducts {
  MockGetProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductRepository);

  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i14.ProductEntity>>> call(
          Object? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i10
            .Future<_i3.Either<_i11.Failure, List<_i14.ProductEntity>>>.value(
            _FakeEither_1<_i11.Failure, List<_i14.ProductEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i14.ProductEntity>>>);
}

/// A class which mocks [ProductBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductBloc extends _i1.Mock implements _i15.ProductBloc {
  MockProductBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetProducts get getProducts => (super.noSuchMethod(
        Invocation.getter(#getProducts),
        returnValue: _FakeGetProducts_2(
          this,
          Invocation.getter(#getProducts),
        ),
      ) as _i4.GetProducts);

  @override
  _i5.GetCart get getCart => (super.noSuchMethod(
        Invocation.getter(#getCart),
        returnValue: _FakeGetCart_3(
          this,
          Invocation.getter(#getCart),
        ),
      ) as _i5.GetCart);

  @override
  _i6.AddToCart get addToCart => (super.noSuchMethod(
        Invocation.getter(#addToCart),
        returnValue: _FakeAddToCart_4(
          this,
          Invocation.getter(#addToCart),
        ),
      ) as _i6.AddToCart);

  @override
  _i7.RemoveFromCart get removeFromCart => (super.noSuchMethod(
        Invocation.getter(#removeFromCart),
        returnValue: _FakeRemoveFromCart_5(
          this,
          Invocation.getter(#removeFromCart),
        ),
      ) as _i7.RemoveFromCart);

  @override
  _i8.DoCheckout get doCheckout => (super.noSuchMethod(
        Invocation.getter(#doCheckout),
        returnValue: _FakeDoCheckout_6(
          this,
          Invocation.getter(#doCheckout),
        ),
      ) as _i8.DoCheckout);

  @override
  _i9.ProductState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProductState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.ProductState);

  @override
  _i10.Stream<_i9.ProductState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i9.ProductState>.empty(),
      ) as _i10.Stream<_i9.ProductState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i16.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.ProductEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.ProductState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.ProductEvent>(
    _i17.EventHandler<E, _i9.ProductState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i16.ProductEvent, _i9.ProductState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void onChange(_i17.Change<_i9.ProductState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
